import { Factory, Guest, PatronPool, GuestCast, Patron, GuestChain, PatronOnce, Source, FactoryType, GuestAwareType, GuestSync, SourceEmpty } from 'patron-oop';
import { SystemFileFromHandler } from '../modules/system/file/SystemFileFromHandler';
import { BrowserFileSaved } from '../modules/integration/browser/file/BrowserFileSaved';
import { TransformedFromJSON } from '../modules/system/transformed/TransformedFromJSON';
import { TransformedToJSON } from '../modules/system/transformed/TransformedToJSON';
import { SvgImage } from '../modules/application/l1/l2/visualisation/svg/SvgImage';
import { SvgMapTypeImage } from '../modules/application/l1/l2/visualisation/svg/SvgMapTypeImage';
import { NumberChunks } from '../modules/application/l1/l2/l3/number/NumberChunks';
import { MapNameFromUrl } from '../modules/application/l1/l2/l3/map/mapCurrent/MapNameFromUrl';
import { TextNoHtml } from '../modules/application/l1/l2/l3/text/TextNoHtml';
import { JSONP } from '../modules/application/l1/l2/requests/JSONP';
import { TextOf } from '../modules/application/l1/l2/l3/l4/text/TextOf';
import { TextWithoutHTML } from '../modules/application/l1/l2/l3/l4/text/TextWithoutHTML';
import { TextNlAsBr } from '../modules/application/l1/l2/l3/l4/text/TextNlAsBr';
export declare const useFactories: () => {
    fileHandlerContent: Factory<SystemFileFromHandler>;
    browserFileSaved: Factory<BrowserFileSaved>;
    transformToString: Factory<TransformedToJSON<any>>;
    transformToObject: Factory<TransformedFromJSON<any>>;
    svgImage: Factory<SvgImage>;
    svgMapTypeImage: Factory<SvgMapTypeImage>;
    numberChunks: Factory<NumberChunks>;
    mapNameFromUrl: Factory<MapNameFromUrl>;
    textNoHtml: Factory<TextNoHtml>;
    jsonp: Factory<JSONP>;
    textOf: Factory<TextOf>;
    textNlAsBr: Factory<TextNlAsBr>;
    textWithoutHTML: Factory<TextWithoutHTML>;
    cache: Factory<Source<any>>;
    chain: Factory<GuestChain<any>>;
    guest: Factory<Guest<any>>;
    guestCast: Factory<GuestCast<any>>;
    guestAware: FactoryType<GuestAwareType<unknown>>;
    guestInTheMiddle: Factory<GuestCast<any>>;
    guestSync: Factory<GuestSync<any>>;
    patron: Factory<Patron<any>>;
    patronOnce: Factory<PatronOnce<any>>;
    pool: Factory<PatronPool<any>>;
    source: Factory<Source<any>>;
    sourceEmpty: Factory<SourceEmpty<any>>;
};
